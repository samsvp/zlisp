(= (cons 1 (list)) (1))
(= (cons 1 (list 2)) (1 2))
(= (cons 1 (list 2 3)) (1 2 3))
(= (cons (list 1) (list 2 3)) ((1) 2 3))

(= (def a (list 2 3)) (2 3))
(= (cons 1 a) (1 2 3))
(= a (2 3))

(= (concat) ())
(= (concat (list 1 2)) (1 2))
(= (concat (list 1 2) (list 3 4)) (1 2 3 4))
(= (concat (list 1 2) (list 3 4) (list 5 6)) (1 2 3 4 5 6))
(= (concat (concat)) ())
(= (concat (list) (list)) ())
(= (= () (concat)) true)

(= (def a (list 1 2)) (1 2))
(= (def b (list 3 4)) (3 4))
(= (concat a b (list 5 6)) (1 2 3 4 5 6))
(= a (1 2))
(= b (3 4))

(= (quote 7) 7)
(= (quote (1 2 3)) (1 2 3))
(= (quote (1 2 (3 4))) (1 2 (3 4)))

(= (quasiquote nil) nil)
(= (quasiquote 7) 7)
(= (quasiquote a) 'a)
(= (quasiquote {"a" b}) '{"a" b})

(= (quasiquote ()) ())
(= (quasiquote (1 2 3)) (1 2 3))
(= (quasiquote (a)) '(a))
(= (quasiquote (1 2 (3 4))) (1 2 (3 4)))
(= (quasiquote (nil)) (nil))
(= (quasiquote (1 ())) (1 ()))
(= (quasiquote (() 1)) (() 1))
(= (quasiquote (1 () 2)) (1 () 2))
(= (quasiquote (())) (()))

(= (quasiquote (unquote 7)) 7)
(= (def a 8) 8)
(= (quasiquote a) 'a)
(= (quasiquote (unquote a)) 8)
(= (quasiquote (1 a 3)) (1 'a 3))
(= (quasiquote (1 (unquote a) 3)) (1 8 3))
(= (def b (quote (1 "b" "d"))) (1 "b" "d"))
(= (quasiquote (1 b 3)) (1 'b 3))
(= (quasiquote (1 (unquote b) 3)) (1 (1 "b" "d") 3))
(= (quasiquote ((unquote 1) (unquote 2))) (1 2))

(= (let [x 0] (quasiquote (unquote x))) 0)

(= (def c (quote (1 "b" "d"))) (1 "b" "d"))
(= (quasiquote (1 c 3)) (1 'c 3))
(= (quasiquote (1 (splice-unquote c) 3)) (1 1 "b" "d" 3))
(= (quasiquote (1 (splice-unquote c))) (1 1 "b" "d"))
(= (quasiquote ((splice-unquote c) 2)) (1 "b" "d" 2))
(= (quasiquote ((splice-unquote c) (splice-unquote c))) (1 "b" "d" 1 "b" "d"))

(= (= (quote abc) (quote abc)) true)
(= (= (quote abc) (quote abcd)) false)
(= (= (quote abc) "abc") false)
(= (= "abc" (quote abc)) false)
(= (= "abc" (str (quote abc))) true)
(= (= (quote abc) nil) false)
(= (= nil (quote abc)) false)

(= '7 7)
(= '(1 2 3) (1 2 3))
(= '(1 2 (3 4)) (1 2 (3 4)))

(= (cons 1 []) (1))
(= (cons [1] [2 3]) ([1] 2 3))
(= (cons 1 [2 3]) (1 2 3))
(= (concat [1 2] (list 3 4) [5 6]) [1 2 3 4 5 6])
(= (concat [1 2]) [1 2])

(= `7 7)
(= `(1 2 3) (1 2 3))
(= `(1 2 (3 4)) (1 2 (3 4)))
(= `(nil) (nil))

(= `~7 7)
(= (def a 8) 8)
(= `(1 ~a 3) (1 8 3))
(= (def b '(1 "b" "d")) (1 "b" "d"))
(= `(1 b 3) (1 'b 3))
(= `(1 ~b 3) (1 (1 "b" "d") 3))

(= (def c '(1 "b" "d")) (1 "b" "d"))
(= `(1 c 3) (1 'c 3))
(= `(1 ~@c 3) (1 1 "b" "d" 3))

(= (vec (list)) [])
(= (vec (list 1)) [1])
(= (vec (list 1 2)) [1 2])
(= (vec []) [])
(= (vec [1 2]) [1 2])

(= (def a (list 1 2)) (1 2))
(= (vec a) [1 2])
(= a (1 2))

(= (quasiquote []) [])
(= (quasiquote [[]]) [[]])
(= (quasiquote [()]) [()])
(= (quasiquote ([])) ([]))
(= (def a 8) 8)
(= `[1 a 3] [1 'a 3])
(= (quasiquote [a [] b [c] d [e f] g]) '[a [] b [c] d [e f] g])

(= `[~a] [8])
(= `[(~a)] [(8)])
(= `([~a]) ([8]))
(= `[a ~a a] '[a 8 a])
(= `([a ~a a]) '([a 8 a]))
(= `[(a ~a a)] '[(a 8 a)])

(= (def c '(1 "b" "d")) (1 "b" "d"))
(= `[~@c] [1 "b" "d"])
(= `[(~@c)] [(1 "b" "d")])
(= `([~@c]) ([1 "b" "d"]))
(= `[1 ~@c 3] [1 1 "b" "d" 3])
(= `([1 ~@c 3]) ([1 1 "b" "d" 3]))
(= `[(1 ~@c 3)] [(1 1 "b" "d" 3)])

(= `(0 unquote) '(0 unquote))
(= `(0 splice-unquote) '(0 splice-unquote))
(= `[unquote 0] '[unquote 0])
(= `[splice-unquote 0] '[splice-unquote 0])
(= `(0 unquote 1) '(0 unquote 1))
(= `(0 splice-unquote ()) '(0 splice-unquote ()))
